@startuml More complete example of a Literate Code Map - 01

!$code = "<color:royalBlue><size:14>"
!$codeb = "<color:DarkSlateGray><size:12>"
!$codeg = "<color:Gray><size:12>"
!$codeb = "<color:royalBlue>"
!$codep = "<color:Purple><size:14>"

header
<font color=red>Prototype of "Literate Code Maps"</font>
(c) Andy Bulka 2019

endheader

class View {
    onKeyUp()
    onClick()
    ---
    .. def <u><b>onClick() ..

    Responsible for handling the clicl event.
    Calls <b>GetShapeList()</b> on the <b>Diagram</b> to get all the shapes, then iterates
    through them, checking each shape's parent. 

    $code ..
    $code for shape in self.GetDiagram().<b>GetShapeList()</b>:  <color:Red><u> 2
    $code   if shape.<b>GetParent()</b> == None:  <color:Red><u>3
    $code   ..

    .. def <u><b>onKeyUp</b>(self, event) ..
    
    Handles the <b>ESC</b> key being hit and switches the canvas
    $code ..
    $code shape.SetCanvas(None)  <color:Red><u>4
    $code ..
}
class Shape {
    canvas
    parent
    --
    <b>SetCanvas()
    <b>GetParent()
    SetBrush()
}
class Diagram <<lib.ogl._lines.py>> {
    shapes
    ---
    <b>GetShapeList()
    <b>Render()
    Clear()
    Scan()
    .. GetShapeList() ..
    $code ...
    $code result = []
    $code for each shape in shapes: 
    \t<i>various filtering conditions, if succesful,
    \t<i>shape gets appended to the result
    $code return result

    .. Render() ..
    <i>Create fresh visualisation

    $code for node in self.displaymodel.graph.nodes:
    $code  assert not node.shape
    $code  if isinstance(node, CommentNode) or hasattr(node, "comment"):
    $code      shape = self.createCommentShape(node)  	<color:Red><u>22
    $code  else:
    $code      shape = self.CreateUmlShape(node)
}

class Shape {
    .. <b>SetCanvas</b>(canvas) ..
    $code ...
    $code self.canvas = canvas   <color:Red>4
    $code ...
    .. <b>GetParent</b>() ..
    Simply a reference to the <i>.parent</i> property, 
    which is <i>None</i> if there is no parent.
    $code ...
    $code return self.parent
}

class Scenario1 < when user clicks on button ><< (S,#FF7700) start here >>

Scenario1 ..> View : 1. onClick()
View ..> Diagram : 2. GetShapeList()\n -> List
View ..> Shape : 3. GetParent()\n -> Shape
View ..> Shape : 4. SetCanvas()



note as N2
The creation of a comment shape
if a little different  <color:Red>22
end note
N2 . View
N2 .[hidden] View

note "The list of shapes is kept in the diagram, which the view uses" as N3
N3 .. View
N3 .. Diagram

center footer

A "Literate Code Map" diagram
combines class and sequence diagrams into one.
Plus adds code fragments, rich narrative text and numbered references.
end footer

@enduml
